//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// 
/// \file B4aSteppingAction.cc
/// \brief Implementation of the B4aSteppingAction class

#include "B4aSteppingAction.hh"
#include "B4aEventAction.hh"
#include "B4DetectorConstruction.hh"

#include "G4Step.hh"
#include "G4RunManager.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B4aSteppingAction::B4aSteppingAction(
                      const B4DetectorConstruction* detectorConstruction,
                      B4aEventAction* eventAction)
  : G4UserSteppingAction(),
    fDetConstruction(detectorConstruction),
    fEventAction(eventAction)
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B4aSteppingAction::~B4aSteppingAction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B4aSteppingAction::UserSteppingAction(const G4Step* step)
{
  // Print Step
  PrintStep(step);
}

// ============================================================================
void B4aSteppingAction::PrintStep(const G4Step* step) {
  //std::cout<<"Print step 1 ..."<<std::endl;
  if(step->GetTotalEnergyDeposit()<1.0E-10) return;
  // auto charge = step->GetTrack()->GetDefinition()->GetPDGCharge();
  auto preStepPoint = step->GetPreStepPoint();
  auto touchable = step->GetPreStepPoint()->GetTouchable();
  auto depth = touchable->GetHistory()->GetDepth();
  auto thisPhysical = touchable->GetVolume(); // mother
  auto thisCopyNo = thisPhysical->GetCopyNo();
  auto thisName = thisPhysical->GetName();
  auto worldPos = preStepPoint->GetPosition();
  auto localPos = touchable->GetHistory()->GetTopTransform().TransformPoint(worldPos);
  auto just_enterd=preStepPoint->GetStepStatus();

  // energy deposit
  auto edep = step->GetTotalEnergyDeposit();
  G4StepPoint* point1 = step->GetPreStepPoint();
  G4ThreeVector pos1 = point1->GetPosition();
  double xx=pos1.x();
  double yy=pos1.y();
  double zz=pos1.z();
  G4Track* track = step ->GetTrack();
  G4int steps = track ->GetCurrentStepNumber();

  const G4DynamicParticle* dynamicParticle= track ->GetDynamicParticle();
  G4ParticleDefinition* particle = dynamicParticle->GetDefinition();
  G4String particleName= particle ->GetParticleName();
  G4double kinEnergy=dynamicParticle->GetKineticEnergy();

  std::cout<<" tk="<<track->GetTrackID();
  std::cout<<" step="<<steps;;
  std::cout<<" "<<particleName;
  std::cout<<" ke="<<kinEnergy;
  std::cout<<" edep="<<edep;
  std::cout<<" xyz=("<<xx<<","<<yy<<","<<zz<<")";
  std::cout<<" depth "<<depth;
  std::cout<<" "<<thisName;
  std::cout<<" "<<thisCopyNo;;
  //std::cout<<" ( "<<motherName;
  //std::cout<<"  "<<motherCopyNo<<" )";;
  std::cout<<" status="<<just_enterd;
  std::cout<<" fGeomBoundary="<<fGeomBoundary;
  std::cout<<" "<<std::endl;
  return ;
}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
